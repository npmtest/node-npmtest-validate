{"/home/travis/build/npmtest/node-npmtest-validate/test.js":"/* istanbul instrument in package npmtest_validate */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-validate/lib.npmtest_validate.js":"/* istanbul instrument in package npmtest_validate */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_validate = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_validate = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-validate/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-validate && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_validate */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_validate\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_validate.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_validate.rollup.js'] =\n            local.assetsDict['/assets.npmtest_validate.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_validate.__dirname + '/lib.npmtest_validate.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-validate/node_modules/validate/index.js":"module.exports = require('./lib/schema');","/home/travis/build/npmtest/node-npmtest-validate/node_modules/validate/lib/schema.js":"var Property = require('./property');\nvar typeOf, dot;\n\ntry {\n  typeOf = require('type');\n  dot = require('dot');\n} catch (err) {\n  typeOf = require('component-type');\n  dot = require('eivindfjeldstad-dot');\n}\n\n/**\n * Expose schema\n */\n\nmodule.exports = Schema;\n\n/**\n * Schema constructor\n *\n * @param {Object} [obj]\n * @param {Object} [opts]\n * @api public\n */\n\nfunction Schema (obj, opts) {\n  if (!(this instanceof Schema)) return new Schema(obj, opts);\n  obj = obj || {};\n  this.props = {};\n  this.opts = opts || {};\n  for (var key in obj) {\n    if (!obj.hasOwnProperty(key)) continue;\n    this.path(key, obj[key]);\n  }\n}\n\n/**\n * Add given `path` to schema with optional `rules`\n *\n * @param {String} path\n * @param {Object} [rules]\n * @return {Property}\n * @api public\n */\n\nSchema.prototype.path = function (path, rules) {\n  var nested = false;\n  var prop = this.props[path] || new Property(path, this);\n  this.props[path] = prop;\n\n  // no rules?\n  if (!rules) return prop;\n\n  // check if nested\n  for (var key in rules) {\n    if (!rules.hasOwnProperty(key)) continue;\n    if ('function' == typeof prop[key]) continue;\n    nested = true;\n    break;\n  }\n\n  for (var key in rules) {\n    if (!rules.hasOwnProperty(key)) continue;\n\n    if (nested) {\n      this.path(join(key, path), rules[key]);\n      continue;\n    }\n\n    var rule = rules[key];\n    if (!Array.isArray(rule)) rule = [rule];\n    prop[key].apply(prop, rule);\n  }\n\n  return prop;\n};\n\n/**\n * Typecast given `obj`\n *\n * @param {Object} obj\n * @api public\n */\n\nSchema.prototype.typecast = function (obj) {\n  for (var key in this.props) {\n    var prop = this.props[key];\n    var value = dot.get(obj, key);\n    if (value == null) continue;\n    dot.set(obj, key, prop.typecast(value));\n  }\n};\n\n/**\n * Strip all keys not in the schema\n *\n * @param {Object} obj\n * @param {String} [prefix]\n * @api public\n */\n\nSchema.prototype.strip = function (obj, prefix) {\n  for (var key in obj) {\n    var path = join(key, prefix);\n\n    if (!obj.hasOwnProperty(key)) continue;\n\n    if (!this.props[path]) {\n      delete obj[key];\n      continue;\n    }\n\n    if (typeOf(obj[key]) == 'object') {\n      this.strip(obj[key], path);\n    }\n  }\n};\n\n/**\n * Validate given `obj`\n *\n * @param {Object} obj\n * @param {Object} [opts]\n * @return {Array}\n * @api public\n */\n\nSchema.prototype.validate = function (obj, opts) {\n  var errors = [];\n  opts = opts || this.opts;\n\n  if (opts.typecast) this.typecast(obj);\n  if (opts.strip !== false) this.strip(obj);\n\n  for (var key in this.props) {\n    var prop = this.props[key];\n    var value = dot.get(obj, key);\n    var err = prop.validate(value, obj);\n    if (err) errors.push(err);\n  }\n\n  return errors;\n};\n\n/**\n * Assert that given `obj` is valid\n *\n * @param {Object} obj\n * @param {Object} [opts]\n * @api public\n */\n\nSchema.prototype.assert = function (obj, opts) {\n  var errors = this.validate(obj, opts);\n  if (errors.length > 0) throw errors[0];\n};\n\n/**\n * Join `path` with `prefix`\n */\n\nfunction join (path, prefix) {\n  return prefix\n    ? prefix + '.' + path\n    : path;\n}\n","/home/travis/build/npmtest/node-npmtest-validate/node_modules/validate/lib/property.js":"var typecast = require('typecast');\nvar typeOf;\n\ntry {\n  typeOf = require('type');\n} catch (err) {\n  typeOf = require('component-type');\n}\n\n/**\n * Expose Property\n */\n\nmodule.exports = Property;\n\n/**\n * Property constructor\n *\n * @param {String} name\n * @param {Object} [opts]\n * @api public\n */\n\nfunction Property (name, schema) {\n  this.fns = [];\n  this.name = name;\n  this.schema = schema;\n  this._type = undefined;\n  this.msg = 'validation failed for path ' + name;\n}\n\nProperty.prototype = {\n\n  /**\n   * Validate with given `fn` and optional `msg`\n   *\n   * @param {Function} fn\n   * @param {String} [msg]\n   * @return {Property}\n   * @api public\n   */\n\n  use: function (fn, msg) {\n    this.fns.push([fn, msg]);\n    return this;\n  },\n\n  /**\n   * Is required\n   *\n   * @param {Boolean} [bool]\n   * @param {String} [msg]\n   * @return {Property}\n   * @api public\n   */\n\n  required: function (bool, msg) {\n    if ('string' == typeof bool) msg = bool;\n    return this.use(required(bool), msg);\n  },\n\n  /**\n   * Is of type `name`\n   *\n   * @param {String} name\n   * @param {String} [msg]\n   * @return {Property}\n   * @api public\n   */\n\n  type: function (name, msg) {\n    this._type = name;\n    return this.use(type(name), msg);\n  },\n\n  /**\n   * Matches given `regexp`\n   *\n   * @param {RegExp} regexp\n   * @param {String} [msg]\n   * @return {Property}\n   * @api public\n   */\n\n  match: function (regexp, msg) {\n    return this.use(match(regexp), msg);\n  },\n\n  /**\n   * Validate each value in array against given function `fn`\n   *\n   * @param {Function} fn\n   * @param {String} [msg]\n   * @return {Property}\n   * @api public\n   */\n\n  each: function (fn, msg) {\n    return this.use(each(fn), msg);\n  },\n\n  /**\n   * Get schema path\n   *\n   * @param {String} path\n   * @param {Object} [rules]\n   * @return {Path}\n   * @api public\n   */\n\n  path: function (path, rules) {\n    return this.schema(path, rules);\n  },\n\n  /**\n   * Set default error message\n   *\n   * @param {String} msg\n   * @return {Property}\n   * @api public\n   */\n\n  message: function (msg) {\n    return this.msg = msg;\n  },\n\n  /**\n   * Typecast given value\n   *\n   * @param {Mixed} val\n   * @return {Mixed}\n   * @api public\n   */\n\n  typecast: function (val) {\n    return typecast(val, this._type);\n  },\n\n  /**\n   * Validate given `value`\n   *\n   * @param {Mixed} value\n   * @param {Object} [ctx]\n   * @return {String|Boolean}\n   * @api public\n   */\n\n  validate: function (value, ctx) {\n    var fns = this.fns;\n\n    for (var i = 0; i < fns.length; i++) {\n      var fn = fns[i];\n      var valid = fn[0].call(ctx, value);\n      if (!valid) return error(this, fn[1]);\n    }\n\n    return false;\n  }\n};\n\n/**\n * Validate presence\n *\n * @return {Function}\n * @api private\n */\n\nfunction required (bool) {\n  return function (value) {\n    return bool === false || !!value;\n  }\n}\n\n/**\n * Validate type\n *\n * @param {String} name\n * @return {Function}\n * @api private\n */\n\nfunction type (name) {\n  return function (value) {\n    return value == null || typeOf(value) == name;\n  }\n}\n\n/**\n * Validate values\n *\n * @param {String} name\n * @return {Function}\n * @api private\n */\n\nfunction each (fn) {\n  return function (arr) {\n    if (arr == null) return true;\n    if (!Array.isArray(arr)) return false;\n\n    for (var i = 0; i < arr.length; i++) {\n      if (!fn(arr[i])) return false;\n    }\n\n    return true;\n  }\n}\n\n/**\n * Match given `regexp`\n *\n * @param {RegExp} regexp\n * @return {Function}\n * @api private\n */\n\nfunction match (regexp) {\n  return function (value) {\n    return value == null || regexp.test(value);\n  }\n}\n\n/**\n * Create an error\n *\n * @param {Property} prop\n * @param {String} msg\n * @return {Error}\n * @api private\n */\n\n\nfunction error (prop, msg) {\n  var err = new Error(msg || prop.msg);\n  err.path = prop.name;\n  return err;\n}\n"}